#include <bits/stdc++.h>
#define MOD 1000000007
#define INF 0x3f3f3f3f
#define MMS(x, y) memset((x), (y), sizeof(x))
#define ll unsigned long long
#define vi vector <int>
#define pii pair <int, int>
#define EPS 1e-9
#define EPSS 1e-10

#define MAXN 100010
#define MAXL 5010
#define SEGN 300030
using namespace std;

int N;
vector <int> adj[MAXN];
set <pii> arti;
bool visited[MAXN];
int clk;
int dfs_num[MAXN], dfs_low[MAXN];
void dfs(int u, int pa) {
    visited[u] = true;
    dfs_low[u] = dfs_num[u] = clk++;
    for (int i : adj[u]) {
        if (!visited[i]) {
            dfs(i, u);
            if (dfs_low[i] > dfs_num[u]) {
                arti.insert({min(u, i), max(u, i)});
            } else {
                dfs_low[u] = min(dfs_low[u], dfs_low[i]);
            }
        } else if (i != pa) {
            dfs_low[u] = min(dfs_low[u], dfs_num[i]);
        }
    }
}
void init(int N) {
    arti.clear();
    for (int i = 0; i <= N; i++)
        adj[i].clear();
    memset(visited, 0, sizeof visited);
    clk = 0;
}
int main() {
    while(scanf("%d", &N) == 1) {
        init(N);
        for (int i = 0, a, b; i < N; i++) {
            scanf("%d (%d)", &a, &b);
            for (int j = 0, c; j < b; j++) {
                scanf("%d", &c);
                adj[a].push_back(c);
            }
        }
        for (int i = 0; i < N; i++) {
            if (!visited[i]) {
                dfs(i, -1);
            }
        }
        printf("%d critical links\n", arti.size());
        for (auto i : arti) {
            printf("%d - %d\n", i.first, i.second);
        }
        printf("\n");
    }
}
